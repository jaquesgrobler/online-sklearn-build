

.. _example_applications_plot_hmm_stock_analysis.py:


==========================
Gaussian HMM of stock data
==========================

This script shows how to use Gaussian HMM.
It uses stock price data, which can be obtained from yahoo finance.
For more information on how to get stock prices with matplotlib, please refer
to date_demo1.py of matplotlib.



.. image:: images/plot_hmm_stock_analysis_1.png
    :align: center


**Script output**::

  fitting to HMM and decoding ...done
  
  Transition matrix
  [[  9.76678380e-01   5.93703621e-09   1.66766724e-16   2.38273494e-03
      2.09388795e-02]
   [  3.99744612e-03   7.19392169e-01   1.18544135e-01   1.54489089e-01
      3.57716094e-03]
   [  4.74715525e-15   3.16273316e-01   6.26673999e-01   3.31014831e-02
      2.39512012e-02]
   [  7.87830784e-04   1.49069056e-01   2.91939567e-02   8.20939559e-01
      9.59727559e-06]
   [  2.63638782e-01   1.70460940e-16   3.22003528e-01   3.60011094e-18
      4.14357691e-01]]
  
  means and vars of each hidden state
  0th hidden state
  mean =  [  2.80182262e-02   4.96955026e+07]
  var =  [  8.85470197e-01   2.50139780e+14]
  
  1th hidden state
  mean =  [  1.16343186e-02   6.99628635e+07]
  var =  [  1.24178403e-01   1.53072039e+14]
  
  2th hidden state
  mean =  [  3.73480611e-02   1.10541517e+08]
  var =  [  1.97430292e-01   8.82225017e+14]
  
  3th hidden state
  mean =  [  6.33530978e-03   4.91487759e+07]
  var =  [  5.06324847e-02   1.09823706e+14]
  
  4th hidden state
  mean =  [ -7.71492173e-01   1.48871635e+08]
  var =  [  6.17254225e+00   1.02346301e+16]



**Python source code:** :download:`plot_hmm_stock_analysis.py <plot_hmm_stock_analysis.py>`

.. literalinclude:: plot_hmm_stock_analysis.py
    :lines: 11-

**Total running time of the example:**  4.07 seconds
    