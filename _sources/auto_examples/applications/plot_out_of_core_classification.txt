

.. _example_applications_plot_out_of_core_classification.py:


======================================================
Out-of-core classification of text documents
======================================================

This is an example showing how scikit-learn can be used for classification
using an out-of-core approach.

Out-of-core learning means that we can learn from data that would not fit into
the computer main memory. To achieve this goal we make use of an online
classifier (i.e. that supports the `partial_fit` method) that will be fed with
batches of examples. Moreover, to guarantee that the features space remains the
same over time we leverage the `HashingVectorizer` class that will project each
example into the same input space. This is especially useful in the case of
text classification where new features (e.g. words) are discovered on the fly.

The dataset used in this example is Reuters-21578 as provided by the UCI ML
repository. It will be automatically downloaded and uncompressed in the current
directory on first run.

The plot represents is the learning curve of the classifier i.e. the evolution
of classification accuracy with the number of mini-batches fed to the
classifier.

`ReutersParser` and `ReutersStreamReader` classes are utility classes to parse
and stream examples to the main learning loop.

To limit the amount of consumed memory at any time we enqueue examples up to a
fixed amount before calling the features transformation and learning routines.
We then clear the examples queue and proceed with enqueuing again and so on.

To study the performance of the method we sample the first 1000 examples of the
dataset and hold them out as separate testing data. We then use it to estimate
accuracy after each mini-batch.



.. image:: images/plot_out_of_core_classification_1.png
    :align: center


**Script output**::

  Test set is 988 documents (122 positive)
      29 train docs (     2 positive)    988 test docs (   122 positive) accuracy: 0.864 in 0.86s (   33 docs/s)
     565 train docs (    58 positive)    988 test docs (   122 positive) accuracy: 0.903 in 1.58s (  356 docs/s)
    1033 train docs (   110 positive)    988 test docs (   122 positive) accuracy: 0.912 in 2.26s (  457 docs/s)
    2009 train docs (   219 positive)    988 test docs (   122 positive) accuracy: 0.904 in 3.11s (  645 docs/s)
    2887 train docs (   280 positive)    988 test docs (   122 positive) accuracy: 0.907 in 3.84s (  751 docs/s)
    3758 train docs (   403 positive)    988 test docs (   122 positive) accuracy: 0.941 in 4.66s (  805 docs/s)
    4690 train docs (   532 positive)    988 test docs (   122 positive) accuracy: 0.948 in 5.47s (  856 docs/s)
    5662 train docs (   656 positive)    988 test docs (   122 positive) accuracy: 0.922 in 6.30s (  898 docs/s)
    6628 train docs (   775 positive)    988 test docs (   122 positive) accuracy: 0.948 in 7.14s (  928 docs/s)
    7595 train docs (   926 positive)    988 test docs (   122 positive) accuracy: 0.954 in 7.94s (  956 docs/s)
    8514 train docs (  1050 positive)    988 test docs (   122 positive) accuracy: 0.945 in 8.74s (  974 docs/s)
    9486 train docs (  1155 positive)    988 test docs (   122 positive) accuracy: 0.950 in 9.60s (  988 docs/s)
   10460 train docs (  1268 positive)    988 test docs (   122 positive) accuracy: 0.954 in 10.44s ( 1001 docs/s)
   11435 train docs (  1394 positive)    988 test docs (   122 positive) accuracy: 0.956 in 11.26s ( 1015 docs/s)
   12407 train docs (  1503 positive)    988 test docs (   122 positive) accuracy: 0.950 in 12.13s ( 1022 docs/s)
   13373 train docs (  1609 positive)    988 test docs (   122 positive) accuracy: 0.963 in 12.98s ( 1030 docs/s)
   14339 train docs (  1721 positive)    988 test docs (   122 positive) accuracy: 0.962 in 13.83s ( 1036 docs/s)
   15310 train docs (  1854 positive)    988 test docs (   122 positive) accuracy: 0.956 in 14.77s ( 1036 docs/s)
   16273 train docs (  2004 positive)    988 test docs (   122 positive) accuracy: 0.946 in 15.60s ( 1042 docs/s)
   17265 train docs (  2147 positive)    988 test docs (   122 positive) accuracy: 0.956 in 16.45s ( 1049 docs/s)
   18251 train docs (  2271 positive)    988 test docs (   122 positive) accuracy: 0.970 in 17.31s ( 1054 docs/s)



**Python source code:** :download:`plot_out_of_core_classification.py <plot_out_of_core_classification.py>`

.. literalinclude:: plot_out_of_core_classification.py
    :lines: 36-

**Total running time of the example:**  17.82 seconds
    